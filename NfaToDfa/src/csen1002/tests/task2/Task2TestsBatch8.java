package csen1002.tests.task2;

import static org.junit.jupiter.api.Assertions.*;

import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task2.NfaToDfa;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task2TestsBatch8 {

	@Test
	public void testNfa1() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10#a;p#0,a,2;0,a,3;0,a,8;0,a,9;0,a,10;0,p,1;0,p,3;0,p,6;0,p,8;0,p,9;1,a,0;1,a,3;1,a,4;1,a,7;1,a,8;1,a,9;1,a,10;1,p,0;1,p,2;1,p,4;1,p,5;1,p,6;1,p,9;1,p,10;2,a,0;2,a,2;2,a,3;2,a,4;2,a,5;2,a,6;2,a,10;2,p,0;2,p,1;2,p,2;2,p,3;2,p,4;2,p,6;2,p,10;3,a,0;3,a,1;3,a,2;3,a,3;3,a,5;3,a,7;3,a,9;3,p,0;3,p,3;3,p,4;3,p,5;3,p,6;3,p,7;3,p,8;4,a,1;4,a,2;4,a,5;4,a,7;4,p,0;4,p,2;4,p,3;4,p,8;4,p,9;4,p,10;5,a,1;5,a,2;5,a,3;5,a,7;5,p,1;5,p,2;5,p,6;5,p,7;5,p,8;5,p,9;6,a,1;6,a,2;6,a,3;6,a,4;6,a,6;6,a,7;6,p,0;6,p,5;6,p,6;6,p,7;6,p,8;6,p,9;7,a,0;7,a,4;7,a,5;7,a,6;7,a,8;7,a,9;7,a,10;7,p,0;7,p,1;7,p,2;7,p,3;7,p,4;7,p,5;7,p,9;8,a,0;8,a,2;8,a,3;8,a,4;8,p,0;8,p,3;8,p,4;8,p,7;8,p,8;8,p,9;8,p,10;9,a,1;9,a,2;9,a,3;9,a,6;9,a,7;9,a,10;9,p,0;9,p,3;9,p,4;9,p,6;9,p,9;9,p,10;10,a,2;10,a,4;10,a,7;10,a,9;10,a,10;10,p,2;10,p,3;10,p,4;10,p,5;10,p,7;10,p,8;10,p,10#7#3;4;6");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/9;0/4/5/6/8/9/10;7#a;p#0/1/2/3/4/5/6/7/8/9/10,a,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,p,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/9,a,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/9,p,0/1/2/3/4/5/6/7/8/9/10;0/4/5/6/8/9/10,a,0/1/2/3/4/5/6/7/8/9/10;0/4/5/6/8/9/10,p,0/1/2/3/4/5/6/7/8/9/10;7,a,0/4/5/6/8/9/10;7,p,0/1/2/3/4/5/9#7#0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/9;0/4/5/6/8/9/10", nfaToDfa.toString());
	}

	@Test
	public void testNfa2() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#m;v#0,e,0;0,m,0;0,m,1;0,m,2;0,m,3;0,m,4;0,m,5;0,m,7;0,v,0;0,v,1;0,v,2;0,v,3;0,v,4;0,v,5;0,v,7;1,e,1;1,m,0;1,m,1;1,m,2;1,m,3;1,m,5;1,m,6;1,m,7;1,v,0;1,v,1;1,v,4;1,v,6;1,v,7;2,e,2;2,m,2;2,m,3;2,m,4;2,m,5;2,m,7;2,v,1;2,v,3;2,v,4;2,v,5;2,v,6;2,v,7;3,e,3;3,m,0;3,m,1;3,m,2;3,m,3;3,m,5;3,m,6;3,m,7;3,v,0;3,v,1;3,v,2;3,v,3;3,v,4;3,v,5;4,e,4;4,m,0;4,m,1;4,m,2;4,m,4;4,m,6;4,v,0;4,v,1;4,v,2;4,v,3;4,v,4;4,v,5;4,v,6;5,e,5;5,m,0;5,m,2;5,m,3;5,m,4;5,m,5;5,m,7;5,v,0;5,v,1;5,v,2;5,v,3;5,v,5;5,v,6;5,v,7;6,e,6;6,m,0;6,m,2;6,m,3;6,m,4;6,m,5;6,m,7;6,v,0;6,v,1;6,v,2;6,v,3;6,v,5;6,v,6;6,v,7;7,e,7;7,m,0;7,m,1;7,m,3;7,m,5;7,m,6;7,v,1;7,v,2;7,v,3;7,v,5;7,v,6#2#1;6");
		assertEquals("0/1/2/3/4/5/6/7;1/3/4/5/6/7;2;2/3/4/5/7#m;v#0/1/2/3/4/5/6/7,m,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,v,0/1/2/3/4/5/6/7;1/3/4/5/6/7,m,0/1/2/3/4/5/6/7;1/3/4/5/6/7,v,0/1/2/3/4/5/6/7;2,m,2/3/4/5/7;2,v,1/3/4/5/6/7;2/3/4/5/7,m,0/1/2/3/4/5/6/7;2/3/4/5/7,v,0/1/2/3/4/5/6/7#2#0/1/2/3/4/5/6/7;1/3/4/5/6/7", nfaToDfa.toString());
	}

	@Test
	public void testNfa3() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10#b;c;m#0,b,1;0,b,8;0,b,9;0,b,10;0,c,3;0,c,6;0,c,7;0,c,8;0,e,0;0,m,1;0,m,3;0,m,8;0,m,9;0,m,10;1,b,4;1,b,5;1,b,6;1,b,10;1,c,2;1,c,3;1,c,6;1,c,9;1,m,1;1,m,3;1,m,4;1,m,10;2,b,2;2,b,3;2,b,4;2,b,6;2,b,7;2,b,9;2,b,10;2,c,2;2,c,3;2,c,5;2,c,6;2,c,7;2,c,8;2,c,10;2,e,8;2,m,1;2,m,2;2,m,6;2,m,7;2,m,8;2,m,9;2,m,10;3,b,0;3,b,3;3,b,4;3,b,5;3,b,6;3,b,7;3,b,8;3,c,1;3,c,2;3,c,4;3,c,9;3,e,7;3,m,1;3,m,2;3,m,3;3,m,4;3,m,8;3,m,9;4,b,0;4,b,2;4,b,4;4,b,7;4,b,8;4,c,3;4,c,5;4,c,6;4,c,9;4,c,10;4,e,5;4,e,9;4,m,0;4,m,1;4,m,2;4,m,4;4,m,5;4,m,8;5,b,0;5,b,3;5,b,4;5,b,5;5,b,6;5,b,7;5,b,9;5,c,1;5,c,2;5,c,3;5,c,4;5,c,6;5,c,8;5,c,10;5,e,5;5,m,0;5,m,2;5,m,3;5,m,4;5,m,5;5,m,7;5,m,10;6,b,4;6,b,5;6,b,6;6,b,9;6,c,1;6,c,2;6,c,3;6,c,4;6,c,8;6,c,9;6,c,10;6,e,9;6,m,2;6,m,4;6,m,6;6,m,7;6,m,8;7,b,2;7,b,3;7,b,4;7,b,5;7,b,7;7,b,9;7,c,0;7,c,2;7,c,4;7,c,5;7,c,6;7,c,7;7,c,9;7,e,0;7,e,4;7,m,2;7,m,4;7,m,6;7,m,8;8,b,2;8,b,3;8,b,7;8,b,9;8,c,1;8,c,2;8,c,4;8,c,5;8,c,6;8,c,9;8,c,10;8,e,8;8,m,0;8,m,1;8,m,3;8,m,4;8,m,5;8,m,6;8,m,8;9,b,2;9,b,4;9,b,5;9,b,7;9,b,9;9,b,10;9,c,0;9,c,1;9,c,3;9,c,5;9,c,9;9,c,10;9,m,2;9,m,3;9,m,5;9,m,7;10,b,0;10,b,2;10,b,3;10,b,4;10,b,8;10,b,10;10,c,0;10,c,1;10,c,8;10,c,9;10,m,3;10,m,4;10,m,5;10,m,6;10,m,8;10,m,10#5#1;2;4;7");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10;0/2/3/4/5/7/8/9/10;0/3/4/5/6/7/9;5#b;c;m#0/1/2/3/4/5/6/7/8/9/10,b,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,c,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,m,0/1/2/3/4/5/6/7/8/9/10;0/2/3/4/5/7/8/9/10,b,0/1/2/3/4/5/6/7/8/9/10;0/2/3/4/5/7/8/9/10,c,0/1/2/3/4/5/6/7/8/9/10;0/2/3/4/5/7/8/9/10,m,0/1/2/3/4/5/6/7/8/9/10;0/3/4/5/6/7/9,b,0/1/2/3/4/5/6/7/8/9/10;0/3/4/5/6/7/9,c,0/1/2/3/4/5/6/7/8/9/10;0/3/4/5/6/7/9,m,0/1/2/3/4/5/6/7/8/9/10;5,b,0/3/4/5/6/7/9;5,c,0/1/2/3/4/5/6/7/8/9/10;5,m,0/2/3/4/5/7/8/9/10#5#0/1/2/3/4/5/6/7/8/9/10;0/2/3/4/5/7/8/9/10;0/3/4/5/6/7/9", nfaToDfa.toString());
	}

	@Test
	public void testNfa4() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#a;g;j#0,a,0;0,a,1;0,a,2;0,a,6;0,a,7;0,e,2;0,g,0;0,g,1;0,g,3;0,g,4;0,j,1;0,j,3;0,j,5;0,j,6;0,j,7;1,a,1;1,a,2;1,a,4;1,a,5;1,a,6;1,a,7;1,e,3;1,g,0;1,g,2;1,g,3;1,g,4;1,g,6;1,g,7;1,j,0;1,j,1;1,j,2;1,j,3;1,j,7;2,a,0;2,a,1;2,a,2;2,a,3;2,a,4;2,a,6;2,a,7;2,e,5;2,g,0;2,g,2;2,g,3;2,g,4;2,g,5;2,g,6;2,g,7;2,j,0;2,j,1;2,j,2;2,j,3;2,j,5;2,j,6;2,j,7;3,a,0;3,a,1;3,a,2;3,a,3;3,a,4;3,a,5;3,a,7;3,e,3;3,e,4;3,g,0;3,g,1;3,g,2;3,g,5;3,j,0;3,j,3;3,j,4;3,j,6;3,j,7;4,a,0;4,a,1;4,a,3;4,a,5;4,a,6;4,a,7;4,e,5;4,g,0;4,g,1;4,g,2;4,g,3;4,g,4;4,g,7;4,j,0;4,j,2;4,j,3;4,j,5;4,j,6;5,a,0;5,a,1;5,a,2;5,a,3;5,a,4;5,a,6;5,a,7;5,e,0;5,e,3;5,g,0;5,g,2;5,g,5;5,g,6;5,g,7;5,j,2;5,j,3;5,j,4;5,j,7;6,a,0;6,a,1;6,a,2;6,a,4;6,a,5;6,a,6;6,a,7;6,g,0;6,g,1;6,g,3;6,g,5;6,g,6;6,g,7;6,j,0;6,j,1;6,j,2;6,j,3;6,j,4;6,j,6;6,j,7;7,a,0;7,a,1;7,a,2;7,a,3;7,a,4;7,a,5;7,a,6;7,e,5;7,g,0;7,g,1;7,g,3;7,g,4;7,g,5;7,g,6;7,g,7;7,j,0;7,j,1;7,j,2;7,j,3;7,j,4;7,j,6#3#1;3;5;6");
		assertEquals("0/1/2/3/4/5/6/7;0/2/3/4/5#a;g;j#0/1/2/3/4/5/6/7,a,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,g,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,j,0/1/2/3/4/5/6/7;0/2/3/4/5,a,0/1/2/3/4/5/6/7;0/2/3/4/5,g,0/1/2/3/4/5/6/7;0/2/3/4/5,j,0/1/2/3/4/5/6/7#0/2/3/4/5#0/1/2/3/4/5/6/7;0/2/3/4/5", nfaToDfa.toString());
	}

	@Test
	public void testNfa5() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6#f;w;x#0,w,1;1,e,2;1,e,6;2,x,3;3,e,4;4,f,5;5,e,2;5,e,6#0#6");
		assertEquals("-1;0;1/2/6;2/5/6;3/4#f;w;x#-1,f,-1;-1,w,-1;-1,x,-1;0,f,-1;0,w,1/2/6;0,x,-1;1/2/6,f,-1;1/2/6,w,-1;1/2/6,x,3/4;2/5/6,f,-1;2/5/6,w,-1;2/5/6,x,3/4;3/4,f,2/5/6;3/4,w,-1;3/4,x,-1#0#1/2/6;2/5/6", nfaToDfa.toString());
	}

	@Test
	public void testNfa6() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#a;g;j;m;s#0,a,1;1,e,7;1,e,9;2,s,3;3,m,4;4,e,8;5,g,6;6,e,8;7,e,2;7,e,5;8,e,11;9,j,10;10,e,11#0#11");
		assertEquals("-1;0;1/2/5/7/9;3;4/8/11;6/8/11;10/11#a;g;j;m;s#-1,a,-1;-1,g,-1;-1,j,-1;-1,m,-1;-1,s,-1;0,a,1/2/5/7/9;0,g,-1;0,j,-1;0,m,-1;0,s,-1;1/2/5/7/9,a,-1;1/2/5/7/9,g,6/8/11;1/2/5/7/9,j,10/11;1/2/5/7/9,m,-1;1/2/5/7/9,s,3;3,a,-1;3,g,-1;3,j,-1;3,m,4/8/11;3,s,-1;4/8/11,a,-1;4/8/11,g,-1;4/8/11,j,-1;4/8/11,m,-1;4/8/11,s,-1;6/8/11,a,-1;6/8/11,g,-1;6/8/11,j,-1;6/8/11,m,-1;6/8/11,s,-1;10/11,a,-1;10/11,g,-1;10/11,j,-1;10/11,m,-1;10/11,s,-1#0#4/8/11;6/8/11;10/11", nfaToDfa.toString());
	}

	@Test
	public void testNfa7() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11;12#p;q#0,p,2;0,p,3;0,p,5;0,p,7;0,p,12;0,q,0;0,q,2;0,q,3;0,q,6;0,q,10;0,q,12;1,p,0;1,p,2;1,p,3;1,p,6;1,p,11;1,q,2;1,q,3;1,q,4;1,q,7;1,q,8;1,q,9;2,p,0;2,p,2;2,p,7;2,p,9;2,p,10;2,p,12;2,q,1;2,q,2;2,q,3;2,q,4;2,q,10;2,q,11;2,q,12;3,p,0;3,p,4;3,p,7;3,p,9;3,p,11;3,p,12;3,q,1;3,q,3;3,q,7;3,q,11;4,p,0;4,p,3;4,p,4;4,p,5;4,q,1;4,q,3;4,q,5;4,q,6;4,q,8;4,q,9;4,q,12;5,p,0;5,p,1;5,p,4;5,p,6;5,p,10;5,p,11;5,p,12;5,q,0;5,q,5;5,q,6;5,q,10;6,p,1;6,p,6;6,p,7;6,p,8;6,p,9;6,p,10;6,q,0;6,q,2;6,q,6;6,q,7;6,q,10;6,q,12;7,p,0;7,p,3;7,p,8;7,p,10;7,q,3;7,q,6;7,q,11;7,q,12;8,p,3;8,p,4;8,p,7;8,p,8;8,p,11;8,p,12;8,q,2;8,q,3;8,q,4;8,q,5;8,q,6;8,q,10;8,q,11;9,p,0;9,p,1;9,p,4;9,p,7;9,p,9;9,p,11;9,p,12;9,q,0;9,q,2;9,q,3;9,q,4;9,q,6;9,q,7;10,p,2;10,p,4;10,p,5;10,p,6;10,p,9;10,p,10;10,p,11;10,q,0;10,q,4;10,q,6;10,q,9;10,q,12;11,p,5;11,p,6;11,p,11;11,p,12;11,q,0;11,q,1;11,q,2;11,q,9;12,p,0;12,p,4;12,p,5;12,p,11;12,q,4;12,q,5;12,q,6;12,q,8#10#1;4;10;12");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/4/5/6/7/8/9/10/12;0/4/6/9/12;2/4/5/6/9/10/11;10#p;q#0/1/2/3/4/5/6/7/8/9/10/11/12,p,0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/4/5/6/7/8/9/10/11/12,q,0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/4/5/6/7/8/9/10/12,p,0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/4/5/6/7/8/9/10/12,q,0/1/2/3/4/5/6/7/8/9/10/11/12;0/4/6/9/12,p,0/1/2/3/4/5/6/7/8/9/10/11/12;0/4/6/9/12,q,0/1/2/3/4/5/6/7/8/9/10/12;2/4/5/6/9/10/11,p,0/1/2/3/4/5/6/7/8/9/10/11/12;2/4/5/6/9/10/11,q,0/1/2/3/4/5/6/7/8/9/10/11/12;10,p,2/4/5/6/9/10/11;10,q,0/4/6/9/12#10#0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/4/5/6/7/8/9/10/12;0/4/6/9/12;2/4/5/6/9/10/11;10", nfaToDfa.toString());
	}

	@Test
	public void testNfa8() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#b;c;k;q;w#0,b,0;0,b,4;0,b,5;0,b,6;0,c,0;0,c,1;0,c,3;0,c,4;0,c,5;0,c,6;0,c,7;0,e,2;0,e,5;0,e,7;0,k,1;0,k,2;0,k,3;0,k,4;0,k,5;0,k,7;0,q,1;0,q,2;0,q,3;0,q,4;0,q,5;0,q,6;0,w,1;0,w,2;0,w,3;0,w,4;0,w,6;0,w,7;1,b,0;1,b,1;1,b,2;1,b,3;1,b,4;1,b,6;1,b,7;1,c,0;1,c,2;1,c,3;1,c,4;1,c,5;1,c,7;1,k,4;1,k,5;1,k,6;1,k,7;1,q,0;1,q,1;1,q,2;1,q,3;1,q,5;1,q,6;1,q,7;1,w,0;1,w,1;1,w,2;1,w,3;1,w,5;1,w,6;2,b,1;2,b,3;2,b,5;2,b,6;2,c,0;2,c,1;2,c,2;2,c,4;2,c,5;2,k,1;2,k,3;2,k,4;2,k,5;2,k,6;2,q,1;2,q,3;2,q,4;2,q,5;2,q,6;2,q,7;2,w,0;2,w,1;2,w,2;2,w,3;2,w,5;2,w,6;2,w,7;3,b,0;3,b,2;3,b,4;3,b,6;3,c,0;3,c,1;3,c,4;3,c,5;3,c,6;3,c,7;3,e,1;3,e,4;3,k,0;3,k,1;3,k,2;3,k,3;3,k,6;3,k,7;3,q,0;3,q,2;3,q,3;3,q,4;3,q,6;3,w,1;3,w,2;3,w,3;3,w,5;3,w,6;3,w,7;4,b,0;4,b,1;4,b,3;4,b,4;4,b,5;4,b,6;4,b,7;4,c,0;4,c,1;4,c,2;4,c,3;4,c,4;4,c,7;4,k,1;4,k,3;4,k,5;4,k,7;4,q,0;4,q,1;4,q,2;4,q,5;4,q,6;4,q,7;4,w,0;4,w,2;4,w,6;4,w,7;5,b,1;5,b,2;5,b,3;5,b,4;5,b,5;5,b,6;5,b,7;5,c,1;5,c,4;5,c,5;5,c,7;5,k,0;5,k,2;5,k,3;5,k,4;5,k,6;5,k,7;5,q,1;5,q,2;5,q,3;5,q,4;5,q,6;5,w,1;5,w,2;5,w,3;5,w,4;5,w,5;5,w,6;5,w,7;6,b,1;6,b,2;6,b,3;6,b,5;6,b,7;6,c,0;6,c,1;6,c,2;6,c,3;6,c,7;6,e,0;6,e,2;6,k,0;6,k,1;6,k,2;6,k,3;6,k,6;6,q,0;6,q,1;6,q,3;6,q,4;6,q,5;6,q,6;6,q,7;6,w,0;6,w,4;6,w,5;6,w,6;7,b,0;7,b,1;7,b,4;7,b,6;7,c,3;7,c,4;7,c,5;7,c,6;7,c,7;7,e,0;7,k,0;7,k,1;7,k,2;7,k,4;7,k,5;7,k,6;7,q,0;7,q,2;7,q,3;7,q,4;7,q,5;7,q,7;7,w,0;7,w,3;7,w,4;7,w,6#0#1;3;5");
		assertEquals("0/1/2/3/4/5/6/7;0/2/5/7#b;c;k;q;w#0/1/2/3/4/5/6/7,b,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,c,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,k,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,q,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,w,0/1/2/3/4/5/6/7;0/2/5/7,b,0/1/2/3/4/5/6/7;0/2/5/7,c,0/1/2/3/4/5/6/7;0/2/5/7,k,0/1/2/3/4/5/6/7;0/2/5/7,q,0/1/2/3/4/5/6/7;0/2/5/7,w,0/1/2/3/4/5/6/7#0/2/5/7#0/1/2/3/4/5/6/7;0/2/5/7", nfaToDfa.toString());
	}

	@Test
	public void testNfa9() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8#b;d#0,b,0;0,b,2;0,b,6;0,b,7;0,d,0;0,d,2;0,d,3;0,d,5;0,d,6;0,d,7;1,b,2;1,b,4;1,b,5;1,b,6;1,b,7;1,b,8;1,d,1;1,d,2;1,d,4;1,d,5;1,d,6;1,d,7;1,d,8;2,b,2;2,b,3;2,b,5;2,b,7;2,d,1;2,d,2;2,d,5;2,d,6;2,d,7;3,b,0;3,b,1;3,b,3;3,b,5;3,b,8;3,d,1;3,d,3;3,d,5;3,d,7;3,d,8;4,b,0;4,b,2;4,b,4;4,b,5;4,b,6;4,b,8;4,d,2;4,d,4;4,d,5;4,d,7;4,d,8;5,b,1;5,b,2;5,b,3;5,b,4;5,b,5;5,d,1;5,d,2;5,d,6;5,d,7;5,d,8;6,b,0;6,b,1;6,b,5;6,b,7;6,b,8;6,d,0;6,d,2;6,d,3;6,d,7;6,d,8;7,b,0;7,b,2;7,b,3;7,b,4;7,b,6;7,b,7;7,b,8;7,d,0;7,d,1;7,d,5;7,d,6;7,d,8;8,b,0;8,b,1;8,b,2;8,b,4;8,b,6;8,b,8;8,d,0;8,d,3;8,d,5;8,d,6;8,d,8#2#1;2");
		assertEquals("0/1/2/3/4/5/6/7/8;0/1/2/3/5/6/7/8;1/2/5/6/7;2;2/3/5/7#b;d#0/1/2/3/4/5/6/7/8,b,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,d,0/1/2/3/4/5/6/7/8;0/1/2/3/5/6/7/8,b,0/1/2/3/4/5/6/7/8;0/1/2/3/5/6/7/8,d,0/1/2/3/4/5/6/7/8;1/2/5/6/7,b,0/1/2/3/4/5/6/7/8;1/2/5/6/7,d,0/1/2/3/4/5/6/7/8;2,b,2/3/5/7;2,d,1/2/5/6/7;2/3/5/7,b,0/1/2/3/4/5/6/7/8;2/3/5/7,d,0/1/2/3/5/6/7/8#2#0/1/2/3/4/5/6/7/8;0/1/2/3/5/6/7/8;1/2/5/6/7;2;2/3/5/7", nfaToDfa.toString());
	}

	@Test
	public void testNfa10() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#u;z#0,u,1;1,e,9;2,u,3;3,e,7;4,z,5;5,e,7;6,e,2;6,e,4;7,e,9;8,e,0;8,e,6;9,e,8;9,e,11;10,e,8;10,e,11#10#11");
		assertEquals("0/1/2/3/4/6/7/8/9/11;0/2/4/5/6/7/8/9/11;0/2/4/6/8/10/11#u;z#0/1/2/3/4/6/7/8/9/11,u,0/1/2/3/4/6/7/8/9/11;0/1/2/3/4/6/7/8/9/11,z,0/2/4/5/6/7/8/9/11;0/2/4/5/6/7/8/9/11,u,0/1/2/3/4/6/7/8/9/11;0/2/4/5/6/7/8/9/11,z,0/2/4/5/6/7/8/9/11;0/2/4/6/8/10/11,u,0/1/2/3/4/6/7/8/9/11;0/2/4/6/8/10/11,z,0/2/4/5/6/7/8/9/11#0/2/4/6/8/10/11#0/1/2/3/4/6/7/8/9/11;0/2/4/5/6/7/8/9/11;0/2/4/6/8/10/11", nfaToDfa.toString());
	}

}